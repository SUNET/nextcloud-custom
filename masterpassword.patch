diff --git a/lib/Http/Middleware/ProvisioningMiddleware.php b/lib/Http/Middleware/ProvisioningMiddleware.php
index 263114647..54e1977fb 100644
--- a/lib/Http/Middleware/ProvisioningMiddleware.php
+++ b/lib/Http/Middleware/ProvisioningMiddleware.php
@@ -26,6 +26,8 @@ declare(strict_types=1);
 
 namespace OCA\Mail\Http\Middleware;
 
+use Horde_Mail_Rfc822_Address;
+use OCA\Mail\Db\Provisioning;
 use OCA\Mail\Service\Provisioning\Manager as ProvisioningManager;
 use OCP\AppFramework\Middleware;
 use OCP\Authentication\Exceptions\CredentialsUnavailableException;
@@ -70,17 +72,27 @@ class ProvisioningMiddleware extends Middleware {
 		try {
 			$this->provisioningManager->provisionSingleUser($configs, $user);
 			$password = $this->credentialStore->getLoginCredentials()->getPassword();
-
-			// FIXME: Need to check for an empty string here too?
-			// The password is empty (and not null) when using WebAuthn passwordless login.
-			// Maybe research other providers as well.
-			// Ref \OCA\Mail\Controller\PageController::index()
-			//     -> inital state for password-is-unavailable
 			if ($password === null) {
-				// Nothing to update, might be passwordless signin
-				$this->logger->debug('No password set for ' . $user->getUID());
-				return;
+				$config = $this->findMatchingConfig($configs, $user);
+				if ($config === null) {
+					$this->logger->debug('No matching config found for ' . $user->getUID());
+					return;
+				}
+				$masterPassword = $config->getMasterPassword();
+				$masterPasswordEnabled = $config->getMasterPasswordEnabled();
+				if ($masterPasswordEnabled && $masterPassword !== null) {
+					$password = $masterPassword;
+				} else {
+					// FIXME: Need to check for an empty string here too?
+					// The password is empty (and not null) when using WebAuthn passwordless login.
+					// Maybe research other providers as well.
+					// Ref \OCA\Mail\Controller\PageController::index()
+					//     -> inital state for password-is-unavailable
+					$this->logger->debug('No password set for ' . $user->getUID());
+					return;
+				}
 			}
+
 			$this->provisioningManager->updatePassword(
 				$user,
 				$password,
@@ -91,4 +103,23 @@ class ProvisioningMiddleware extends Middleware {
 			return;
 		}
 	}
+
+	private function findMatchingConfig(array $provisionings, IUser $user): ?Provisioning {
+		foreach ($provisionings as $provisioning) {
+			if ($provisioning->getProvisioningDomain() === Provisioning::WILDCARD) {
+				return $provisioning;
+			}
+
+			$email = $user->getEMailAddress();
+			if ($email === null) {
+				continue;
+			}
+			$rfc822Address = new Horde_Mail_Rfc822_Address($email);
+			if ($rfc822Address->matchDomain($provisioning->getProvisioningDomain())) {
+				return $provisioning;
+			}
+		}
+
+		return null;
+	}
 }
