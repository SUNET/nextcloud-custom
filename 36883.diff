diff --git a/lib/private/legacy/OC_User.php b/lib/private/legacy/OC_User.php
index de066e143b40..d7ee07b8f20a 100644
--- a/lib/private/legacy/OC_User.php
+++ b/lib/private/legacy/OC_User.php
@@ -40,6 +40,7 @@ use OC\User\LoginException;
 use OCP\EventDispatcher\IEventDispatcher;
 use OCP\ILogger;
 use OCP\IUserManager;
+use OCP\User\Events\BeforeUserLoggedInEvent;
 use OCP\User\Events\UserLoggedInEvent;
 
 /**
@@ -172,16 +173,24 @@ class OC_User {
 			if (self::getUser() !== $uid) {
 				self::setUserId($uid);
 				$userSession = \OC::$server->getUserSession();
+
+				/** @var IEventDispatcher $dispatcher */
+				$dispatcher = \OC::$server->get(IEventDispatcher::class);
+
 				if ($userSession->getUser() && !$userSession->getUser()->isEnabled()) {
 					$message = \OC::$server->getL10N('lib')->t('User disabled');
 					throw new LoginException($message);
 				}
 				$userSession->setLoginName($uid);
 				$request = OC::$server->getRequest();
-				$password = null;
+				$password = '';
 				if ($backend instanceof \OCP\Authentication\IProvideUserSecretBackend) {
 					$password = $backend->getCurrentUserSecret();
 				}
+
+				/** @var IEventDispatcher $dispatcher */
+				$dispatcher->dispatchTyped(new BeforeUserLoggedInEvent($uid, $password, $backend));
+
 				$userSession->createSessionToken($request, $uid, $uid, $password);
 				$userSession->createRememberMeToken($userSession->getUser());
 				// setup the filesystem
@@ -199,8 +208,6 @@ class OC_User {
 						'isTokenLogin' => false,
 					]
 				);
-				/** @var IEventDispatcher $dispatcher */
-				$dispatcher = \OC::$server->get(IEventDispatcher::class);
 				$dispatcher->dispatchTyped(new UserLoggedInEvent(
 						\OC::$server->get(IUserManager::class)->get($uid),
 						$uid,
diff --git a/lib/public/User/Events/BeforeUserLoggedInEvent.php b/lib/public/User/Events/BeforeUserLoggedInEvent.php
index e39cd0f116d1..4d6fbac266da 100644
--- a/lib/public/User/Events/BeforeUserLoggedInEvent.php
+++ b/lib/public/User/Events/BeforeUserLoggedInEvent.php
@@ -26,26 +26,25 @@ declare(strict_types=1);
  */
 namespace OCP\User\Events;
 
+use OCP\Authentication\IApacheBackend;
 use OCP\EventDispatcher\Event;
 
 /**
  * @since 18.0.0
  */
 class BeforeUserLoggedInEvent extends Event {
-
-	/** @var string */
-	private $username;
-
-	/** @var string */
-	private $password;
+	private string $username;
+	private string $password;
+	private ?IApacheBackend $backend;
 
 	/**
 	 * @since 18.0.0
 	 */
-	public function __construct(string $username, string $password) {
+	public function __construct(string $username, string $password, ?IApacheBackend $backend = null) {
 		parent::__construct();
 		$this->username = $username;
 		$this->password = $password;
+		$this->backend = $backend;
 	}
 
 	/**
@@ -63,4 +62,14 @@ class BeforeUserLoggedInEvent extends Event {
 	public function getPassword(): string {
 		return $this->password;
 	}
+
+	/**
+	 * return backend if available (or null)
+	 *
+	 * @return IApacheBackend|null
+	 * @since 26.0.0
+	 */
+	public function getBackend(): ?IApacheBackend {
+		return $this->backend;
+	}
 }
